#pragma once

#include <random>

#include <Mathematics/Hyperellipsoid.h>

namespace gte
{
    // These are not quite uniformly distributed, since they are generated by 
    // creating a uniform distribution over a unit sphere, and then projecting
    // the generated points onto the given ellipsoid.
    template <int32_t N, typename Real>
    std::vector<Vector<N,Real>> RandomSurfaceGrid(int num, 
        Hyperellipsoid<N,Real> const& ellipsoid, 
        unsigned int seed = std::random_device{}())
    {
        std::mt19937 gen(seed);
        std::normal_distribution<Real> dist((Real)0, (Real)1);

        std::vector<Vector<N,Real>> grid(num);
        Vector<N,Real> point;
        for (int i = 0; i < num; i++)
        {
            for (int j = 0; j < N; j++)
                point[j] = dist(gen);

            Normalize(point);

            // Scale the unit vector to the hyperellipsoid surface
            for (int j = 0; j < N; j++)
                grid[i] = grid[i] + point[j]*ellipsoid.axis[j]*ellipsoid.extent[j];

            // Translate
            grid[i] =  grid[i] + ellipsoid.center;
        }

        return grid;
    }
}
